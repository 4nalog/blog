{"remainingRequest":"/Users/joshuacomeau/work/blog/node_modules/docz-core/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/joshuacomeau/work/blog/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/joshuacomeau/work/blog/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/joshuacomeau/work/blog/node_modules/docz-core/node_modules/react-hot-loader/babel.js\"],\"cacheDirectory\":true,\"babelrc\":false}!/Users/joshuacomeau/work/blog/src/pages/posts/dynamic-bezier-curves/main-content.js","dependencies":[{"path":"/Users/joshuacomeau/work/blog/src/pages/posts/dynamic-bezier-curves/main-content.js","mtime":1538912907277},{"path":"/Users/joshuacomeau/work/blog/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/joshuacomeau/work/blog/node_modules/docz-core/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/joshuacomeau/work/blog/src/pages/posts/dynamic-bezier-curves/main-content.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\n/*\n  This first post was not originally written in MDX.\n\n  Rather than spend a bunch of time converting it, I'm just \"wrapping\" it, by\n  importing the original component.\n\n  Not the cleanest solution, but by far the fastest :)\n*/\n\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { COLORS } from 'constants';\nimport { getInterpolatedValue } from 'utils';\nimport Paragraph from 'components/Paragraph';\nimport Sidenote from 'components/Sidenote';\nimport List from 'components/List';\nimport ListItem from 'components/ListItem';\nimport SectionHeading from 'components/SectionHeading';\nimport SectionSubHeading from 'components/SectionSubHeading';\nimport InlineCode from 'components/InlineCode';\nimport Divider from 'components/Divider';\nimport TextLink from 'components/TextLink';\nimport Em from 'components/Em';\nimport NewsletterSignup from 'components/NewsletterSignup';\nimport Spacer from 'components/Spacer';\nimport Latex from 'components/Latex';\nimport SingleAxisDemo from 'components/SingleAxisDemo';\nimport LiveEditableCode from 'components/LiveEditableCode';\nimport InitialCurve from 'components/InitialCurve';\nimport BezierController from 'components/BezierController';\nimport BezierFlattener from 'components/BezierFlattener';\nimport BezierInterpolationGraph from 'components/BezierInterpolationGraph';\nimport TrackRead from 'components/TrackRead';\nimport basicShapesCode from './code/basic-shapes.example';\nimport pathIntroCode from './code/path-intro.example';\nimport bezierPathCode from './code/bezier-path.example';\nimport chainedCurvesCode from './code/chained-curves.example';\nimport reactBezierCode from './code/react-bezier.example';\nimport interpolateFunctionCode from './code/interpolate-function.example';\nimport reactScrollFlattenerCode from './code/react-scroll-flattener.example';\nimport reactScrollFlattenerRefactoredCode from './code/react-scroll-flattener-refactored.example';\nexport var FRONT_MATTER = {\n  title: 'Dynamic Bézier Curves',\n  slug: 'dynamic-bezier-curves',\n  published: true,\n  publishedOn: '2018-05-23',\n  heroStyle: 'watermelon-gradient',\n  heroImage: null,\n  heroBackground: 'linear-gradient(120deg, #d4fc79 0%, #96e6a1 100%)',\n  heroTitleGradientSteps: ['80deg', COLORS.pink[500], COLORS.purple[700]],\n  abstract: \"A deep dive into Bézier curves in React. We'll look at how to build dynamic effects such as scroll-to-flatten using SVG path instructions, and how to architect our components for maximum readability and reusability.\"\n};\n\nvar _default = function _default() {\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"First off - woohoo! This is my first published post on the new blog. I'm super excited. Thanks for checking it out! \\uD83E\\uDD42\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"While building this blog, I wanted it to feel whimsical, with plenty of charming interactions and animations. I built this while working on my React Europe talk,\", ' ', React.createElement(TextLink, {\n    href: \"https://www.youtube.com/watch?v=Z2d9rw9RwyE\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"The Case for Whimsy\"), \", and so it was very much on my mind.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"For example, did you notice that as you started scrolling on this page, the B\\xE9zier curves that border the green title hero thingy started flattening? Keep your eye on the swoopy curves just above the post text as you scroll through the top of the document. Notice how they become flat as they approach the header at the top of the viewport?\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"In a delightful bit of serendipity, I realized while building the blog that this feature would make a great first blog post!\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"The whole reason I started this blog was that I wanted a way to build dynamic, interactive articles that are more effective at sharing and teaching concepts. Unlike with plain text on Medium, this blog is a fully-powered React app, and so I can create and embed interactive elements that help the reader build an intuitive understanding of the subject being presented. These dynamic \\\"flattenable\\\" B\\xE9zier curves are a perfect subject for this format, as they have underlying complexity that would be difficult to explain with words alone.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"In this maiden blog post, we'll go through the basics of working with B\\xE9zier curves and SVG in React.js. We'll learn how to build dynamic curves that respond to user input:\"), React.createElement(SingleAxisDemo, {\n    id: \"flattenable-curve\",\n    showNote: true,\n    defaultValue: 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, function (value) {\n    return React.createElement(InitialCurve, {\n      percentStraightened: value,\n      color: COLORS.pink[500],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    });\n  }), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(SectionHeading, {\n    anchorId: \"understanding-svg-paths\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"A Quick SVG Refresher\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"For achieving this effect, we'll use SVG. We could also use HTML Canvas, but I generally prefer to work with SVG. It's more React-like in its API, there's less complexity in setting it up, and it's more a11y-friendly.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"While doing a deep dive into SVG is beyond the scope of this post (I'd recommend the\", ' ', React.createElement(TextLink, {\n    href: \"https://www.w3schools.com/graphics/svg_intro.asp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"W3Schools tutorial\"), ' ', \"for that), we'll cover the basics, and show how to create some shapes from scratch. Experienced SVG-ers can jump to\", ' ', React.createElement(TextLink, {\n    href: \"#intro-to-bezier-curves\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"the next section\"), \".\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"The simplest form of SVG drawings use shape elements, like\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, '<rect>'), \" or\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, '<ellipse>'), \".\"), React.createElement(LiveEditableCode, {\n    id: \"basic-shapes\",\n    gistId: \"01114efda3cb02e4ffa3b49431c14982\",\n    code: basicShapesCode,\n    split: [50, 50],\n    maxHeight: 585,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }), React.createElement(Sidenote, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Note:\"), \" All the code snippets in this page are React elements, not HTML.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"These shapes are straightforward and declarative, but that simplicity comes at the cost of flexibility; you can only create a handful of different shapes.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"To do neat curvy things, we need to use the\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, '<path>'), \" element. This swiss-army-knife of an SVG primitive lets you specify a sequence of steps to execute, in a seemingly-inscrutable bundle of letters and numbers:\"), React.createElement(LiveEditableCode, {\n    id: \"path-intro\",\n    gistId: \"27a7f8f1b1a8dcd93d4330b90a7dcc86\",\n    code: pathIntroCode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"The interactive code snippet above uses 2 commands:\"), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"M\"), \", which instructs the path to \", React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"move\"), \" to a specific coordinate.\"), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, \"L\"), \", which instructs the path to create a\", ' ', React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"line\"), \" from the current position to the specified coordinate.\")), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"After the commands \", React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"M\"), \" and\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \"L\"), \", we see some numbers. These can be thought of as \\\"arguments\\\" for the commands. In this case, the arguments are coordinates; both commands require a single X/Y pair.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, \"In other words, we can read the above path as: \\\"Move to\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, '{x: 100, y: 100}'), \", then draw a line to\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, '{x: 200, y: 100}'), \"\\\", and so on.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"The coordinate system is relative to the values specified in the\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"viewBox\"), \". The current viewbox specifies that the viewable area has a top-left corner of 0/0, a width of 300, and a height of 300. So all of the coordinates specified in the\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, \"path\"), \" are within that 300x300 box.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"The \", React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, \"viewBox\"), \" is what makes SVGs scalable; we can make our SVG any size we like, and everything will scale naturally, since the elements within our SVG are relative to this 300x300 box.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"The \", React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, \"path\"), \" element features\", ' ', React.createElement(TextLink, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, \"quite a number\"), ' ', \"of these commands. There are two that are relevant for our purposes:\"), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, \"Q\"), \", which instructs the path to create a\", ' ', React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, \"quadratic\"), \" B\\xE9zier curve.\"), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, \"C\"), \", which instructs the path to create a\", ' ', React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, \"cubic\"), \" B\\xE9zier curve.\")), React.createElement(Spacer, {\n    size: 80,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }), React.createElement(SectionHeading, {\n    anchorId: \"intro-to-bezier-curves\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, \"Intro to B\\xE9zier Curves\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, \"B\\xE9zier curves are surprisingly common. Due to their versatility, they're a staple in most graphics software like Photoshop, but they're also used as timing functions: if you've ever used non-linear CSS transitions (like the default \\\"ease\\\"), you've already worked with B\\xE9zier curves!\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, \"But what are they, and how do they work?\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, \"A B\\xE9zier curve is essentially a line from a \", React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, \"start point\"), \" to an\", ' ', React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, \"end point\"), \" that is acted upon by one or more\", ' ', React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, \"control points\"), \". A control point curves the line towards it, as if the control point was pulling it in its direction.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, \"The following line looks like a straight line, but check out what happens when you move the points around\\u2014try dragging the middle control point up and down.\"), React.createElement(BezierController, {\n    id: \"initial\",\n    initialType: \"quadratic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, \"The line above is a \", React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, \"quadratic\"), \" B\\xE9zier curve; this means that it has a \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, \"single control point\"), \". I'm guessing it gets its name from the fact that you can create parabola-like shapes with it:\"), React.createElement(BezierController, {\n    id: \"parabola\",\n    initialType: \"quadratic\",\n    p1: [400, 15],\n    p2: [500, 395],\n    p4: [600, 15],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, \"A \", React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, \"cubic\"), \" B\\xE9zier curve, in contrast, has \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, \"two\"), ' ', \"control points. This allows for much more interesting curves:\"), React.createElement(BezierController, {\n    id: \"toggleable\",\n    allowToggle: true,\n    initialType: \"cubic\",\n    p1: [25, 25],\n    p2: [333, 375],\n    p3: [666, 25],\n    p4: [975, 375],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, \"The syntax for B\\xE9zier curves in SVG \", React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, \"path\"), ' ', \"definitions is a little counter-intuitive, but it looks like this:\"), React.createElement(LiveEditableCode, {\n    id: \"bezier-path\",\n    gistId: \"1720d55b885e61dc070a59fabc500142\",\n    code: bezierPathCode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, \"The thing that makes this counter-intuitive, to me at least, is that the\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, \"startPoint\"), \" is inferred in the\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, \"Q\"), \" command; while there are 3 points needed for a quadratic B\\xE9zier curve, only 2 points are passed as arguments to\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, \"Q\"), \".\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, \"Similarly, for a cubic B\\xE9zier curve, only the control points and the end point are provided to the \", React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, \"C\"), \" command.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, \"This syntax does mean that curves can conveniently be chained together, as one curve starts where the last one ends:\"), React.createElement(LiveEditableCode, {\n    id: \"chained-curves\",\n    gistId: \"5f7315ec4751cf2dadb5ba41f037dcdc\",\n    code: chainedCurvesCode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }, \"Ok, I think that's enough playing with vanilla SVGs. Let's see how we can leverage React to make these curves dynamic!\"), React.createElement(SectionHeading, {\n    anchorId: \"bezier-curves-in-react\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293\n    },\n    __self: this\n  }, \"B\\xE9zier Curves in React\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }, \"Up to this point, we've been looking at static SVGs. How do we make them change, over time or based on user input?\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }, \"Well, in keeping with the \\\"meta\\\" theme of this blog post, why not examine the draggable-with-lines B\\xE9zier curves from earlier in this post?\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, \"There's a fair bit of code to manage this, even in this slightly-simplified snippet. I've annotated it heavily, which hopefully makes things easier to parse. \\uD83E\\uDD1E\"), React.createElement(LiveEditableCode, {\n    id: \"react-bezier\",\n    gistId: \"f164468fc145cc8abb28f6b12652f93b\",\n    size: \"extra-wide\",\n    code: reactBezierCode,\n    maxHeight: 650,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  }), React.createElement(Sidenote, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317\n    },\n    __self: this\n  }, React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318\n    },\n    __self: this\n  }, \"Note:\"), \" The full version, with support for touch events, can be found\", ' ', React.createElement(TextLink, {\n    href: \"https://github.com/joshwcomeau/blog/blob/master/src/components/Bezier.js\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320\n    },\n    __self: this\n  }, \"on GitHub\"), \".\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325\n    },\n    __self: this\n  }, \"To summarize how this works:\"), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326\n    },\n    __self: this\n  }, React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327\n    },\n    __self: this\n  }, \"React holds variables in component state for\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329\n    },\n    __self: this\n  }, \"startPoint\"), \",\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330\n    },\n    __self: this\n  }, \"controlPoint\"), \", and\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331\n    },\n    __self: this\n  }, \"endPoint\"), \".\"), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333\n    },\n    __self: this\n  }, \"In the \", React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334\n    },\n    __self: this\n  }, \"render\"), \" method, we build the instructions for the\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335\n    },\n    __self: this\n  }, \"path\"), \" using these state variables.\"), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337\n    },\n    __self: this\n  }, \"When the user clicks or taps on one of the points, we update the state to keep track of which point is moving with\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340\n    },\n    __self: this\n  }, \"draggingPointId\"), \".\"), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342\n    },\n    __self: this\n  }, \"As the user moves the mouse (or finger) across the SVG's surface, we do some calculations to figure out where the currently-dragging point needs to move to. This is made complex by the fact that SVGs have their own internal coordinate system (viewBox), and so we have to translate the on-screen pixels to this system.\"), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350\n    },\n    __self: this\n  }, \"Once we have the new X/Y coordinate for the active point,\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352\n    },\n    __self: this\n  }, \"setState\"), \" lets React know about this state change, and the component re-renders, which causes the\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354\n    },\n    __self: this\n  }, \"path\"), \" to be re-calculated.\")), React.createElement(Spacer, {\n    size: 25,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357\n    },\n    __self: this\n  }), React.createElement(SectionSubHeading, {\n    anchorId: \"a-note-on-performance\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358\n    },\n    __self: this\n  }, \"A note on performance\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361\n    },\n    __self: this\n  }, \"By using React's update cycle to manage the point coordinates, there is added overhead of letting React run its reconciliation cycle on every\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364\n    },\n    __self: this\n  }, \"mousemove\"), \". Is this prohibitively expensive?\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366\n    },\n    __self: this\n  }, \"The answer is that it depends. React's reconciliation can be surprisingly fast, especially when dealing with such a small tree (after all, the only thing that needs to be diffed is an SVG). Especially in \\\"production\\\" mode, when React doesn't have to do a lot of dev warning checks, this process can take fractions of a millisecond.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373\n    },\n    __self: this\n  }, \"I wrote an\", ' ', React.createElement(TextLink, {\n    href: \"https://github.com/joshwcomeau/blog/blob/master/src/pages/posts/dynamic-bezier-curves/code/optimized-react-bezier.example\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375\n    },\n    __self: this\n  }, \"alternative implementation\"), ' ', \"that updates the DOM directly. It does run faster (about 50% faster in my quick test), but both implementations still clock in under 1ms on modern high-end hardware. On the cheapest Chromebook I could find, the \\\"unoptimized\\\" one still averaged 50fps or so.\"), React.createElement(Spacer, {\n    size: 80,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383\n    },\n    __self: this\n  }), React.createElement(SectionHeading, {\n    anchorId: \"curve-interpolation\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384\n    },\n    __self: this\n  }, \"Curve Interpolation\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387\n    },\n    __self: this\n  }, \"I seem to have gotten a little side-tracked! Our original goal was to create a B\\xE9zier curve that flattens itself on scroll.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391\n    },\n    __self: this\n  }, \"Given what we've gone over so far, we have almost all of the tools we need to solve this problem! A B\\xE9zier curve with its control point(s) directly between the start and end points is actually a straight line! So we need to transition the control points from their curvy values to a flat value.\"), React.createElement(BezierFlattener, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397\n    },\n    __self: this\n  }), React.createElement(Spacer, {\n    size: 32,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398\n    },\n    __self: this\n  }), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399\n    },\n    __self: this\n  }, \"We need a way to \", React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400\n    },\n    __self: this\n  }, \"interpolate values\"), \". We know where the control points should be at 0% and 100%, but what about when the user is 25% scrolled through the content?\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404\n    },\n    __self: this\n  }, \"While we could be fancy and ease the transition, a linear transformation works just fine for our purposes. So when the user is 50% scrolled through the content, the control points will be 50% of the way between their initial curvy value, and the flat-line value.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410\n    },\n    __self: this\n  }, \"For this, some secondary-school maths will come in handy. If you're already up to speed on interpolation, you can\", ' ', React.createElement(TextLink, {\n    href: \"#handling-scroll-in-react\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413\n    },\n    __self: this\n  }, \"skip this bit\"), \".\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415\n    },\n    __self: this\n  }, \"If you plumb the depths of your memory, you may remember how to calculate the \", React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417\n    },\n    __self: this\n  }, \"slope\"), \" of a line. The slope tells you how the line changes over time. We calculate it by dividing the\", ' ', React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419\n    },\n    __self: this\n  }, \"change in \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420\n    },\n    __self: this\n  }, \"y\")), ' ', \"over the\", ' ', React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423\n    },\n    __self: this\n  }, \"change in \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424\n    },\n    __self: this\n  }, \"x\")), \":\"), React.createElement(Latex, {\n    block: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427\n    },\n    __self: this\n  }, 'slope = \\\\frac{y2 - y1}{x2 - x1} = \\\\frac{Δy}{Δx}'), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428\n    },\n    __self: this\n  }, \"There's also this rascal, the linear equation formula. This allows us to graph a straight line, and figure out the \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430\n    },\n    __self: this\n  }, \"y\"), \" value for a given \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431\n    },\n    __self: this\n  }, \"x\"), \" value. By convention, slope is given the variable\", ' ', React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432\n    },\n    __self: this\n  }, \"a\"), \":\"), React.createElement(Latex, {\n    block: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434\n    },\n    __self: this\n  }, \"y = ax + b\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435\n    },\n    __self: this\n  }, \"How does this relate to interpolation? Well, let's imagine that our B\\xE9zier curve's control point, when it's all curvy, is \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437\n    },\n    __self: this\n  }, \"200\"), \" pixels away from its flattened position, so we'll give it an initial\", ' ', React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439\n    },\n    __self: this\n  }, \"y\"), \" value of \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439\n    },\n    __self: this\n  }, \"200\"), \". The \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439\n    },\n    __self: this\n  }, \"x\"), \" in this case is really a measure of progress, so we'll have it range from\", ' ', React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441\n    },\n    __self: this\n  }, \"0\"), \" (completely curvy) to \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441\n    },\n    __self: this\n  }, \"1\"), \" (completely flat). If we graph this line, we get this:\"), React.createElement(BezierInterpolationGraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444\n    },\n    __self: this\n  }), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446\n    },\n    __self: this\n  }, \"To clarify, this line represents the range of possible \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447\n    },\n    __self: this\n  }, \"y\"), ' ', \"values for a quadratic B\\xE9zier curve's control point. Our \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448\n    },\n    __self: this\n  }, \"x\"), ' ', \"values represent the degree of \\\"flattening\\\"; this is useful to us because we want to be able to provide an \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450\n    },\n    __self: this\n  }, \"x\"), \" value like\", ' ', React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451\n    },\n    __self: this\n  }, \"0.46\"), \", and figure out what the corresponding\", ' ', React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452\n    },\n    __self: this\n  }, \"y\"), \" value is (our \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452\n    },\n    __self: this\n  }, \"x\"), \" value will come from user input, like the percentage scrolled through the viewport).\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456\n    },\n    __self: this\n  }, \"To make our formula work, we need to know at least 2 points on this line. Thankfully, we do! We know that the initial position, fully curved, is at\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459\n    },\n    __self: this\n  }, \"{ x: 0, y: 200 }\"), \", and we know that the curve becomes fully flattened at \", React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460\n    },\n    __self: this\n  }, \"{ x: 1, y: 0 }\"), \".\"), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462\n    },\n    __self: this\n  }, React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463\n    },\n    __self: this\n  }, \"The slope would be equal to\", ' ', React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465\n    },\n    __self: this\n  }, '\\\\frac{Δy}{Δx} = \\\\frac{0 - 200}{1 - 0} = \\\\frac{-200}{1} = -200'), \".\"), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469\n    },\n    __self: this\n  }, \"Our \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470\n    },\n    __self: this\n  }, \"b\"), \" value is the y-axis intercept, which is our initial curved value, \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 471\n    },\n    __self: this\n  }, \"200\"), \".\"), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473\n    },\n    __self: this\n  }, React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474\n    },\n    __self: this\n  }, \"x\"), \" will be the ratio of scroll-through, between 0 and 1, that we'll get from our scroll handler.\")), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478\n    },\n    __self: this\n  }, \"Filling it in:\"), React.createElement(Latex, {\n    block: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479\n    },\n    __self: this\n  }, 'y = -200x + 200'), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 480\n    },\n    __self: this\n  }, \"If it's 25% of the way through, \", React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481\n    },\n    __self: this\n  }, \"x\"), \" will be 0.25, and so our\", ' ', React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482\n    },\n    __self: this\n  }, \"y\"), \" value would be\", ' ', React.createElement(Latex, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483\n    },\n    __self: this\n  }, \"y = (-200)(0.25) + 200 = 150\"), \", which is correct: 150 is 1/4 of the way between 200 and 0.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486\n    },\n    __self: this\n  }, \"Here's our function that performs the above calculations:\"), React.createElement(LiveEditableCode, {\n    id: \"interpolate-function\",\n    gistId: \"63a1555b693153f08908a727c98a7310\",\n    maxHeight: 600,\n    split: [0.8, 0.2],\n    code: interpolateFunctionCode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489\n    },\n    __self: this\n  }), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496\n    },\n    __self: this\n  }, \"Looks like teenage-me was wrong; algebra \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497\n    },\n    __self: this\n  }, \"is\"), \" useful and practical!\"), React.createElement(Spacer, {\n    size: 80,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500\n    },\n    __self: this\n  }), React.createElement(SectionHeading, {\n    anchorId: \"handling-scroll-in-react\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501\n    },\n    __self: this\n  }, \"Handling Scroll in React\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504\n    },\n    __self: this\n  }, \"We're in the home stretch now! Time to combine all these ideas into something usable.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508\n    },\n    __self: this\n  }, \"Let's start by building a component that contains our scroll-handler to interpolate from the bottom of the viewport to the top, and connect those values to a B\\xE9zier curve in the \", React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511\n    },\n    __self: this\n  }, \"render\"), \" function:\"), React.createElement(LiveEditableCode, {\n    id: \"react-scroll-flattener\",\n    gistId: \"9e3fa23fb1f291ee781ed110b6cb7843\",\n    scope: {\n      getInterpolatedValue: getInterpolatedValue,\n      PropTypes: PropTypes\n    },\n    size: \"extra-wide\",\n    code: reactScrollFlattenerCode,\n    maxHeight: 650,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513\n    },\n    __self: this\n  }), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521\n    },\n    __self: this\n  }, \"This initial approach seems to work OK! There are two things I want to improve though:\"), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 525\n    },\n    __self: this\n  }, React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526\n    },\n    __self: this\n  }, \"The \\\"timing\\\" of the flattening feels wrong to me.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528\n    },\n    __self: this\n  }), React.createElement(Spacer, {\n    size: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529\n    },\n    __self: this\n  }), \"When the curve fully enters the viewport, it's already starting to be flattened. We don't get to see it in 100%-curved form. Worse, it hasn't finished flattening by the time it scrolls out of view! This is because this page has a header that takes up the top 50px of the viewport, and we aren't taking that into account.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535\n    },\n    __self: this\n  }), React.createElement(Spacer, {\n    size: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 536\n    },\n    __self: this\n  }), \"To solve these problems, we need to define a \", React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537\n    },\n    __self: this\n  }, \"scrollable area\"), \", instead of using the viewport.\"), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 540\n    },\n    __self: this\n  }, \"This component is doing an awful lot. It feels like we could extract a couple components from this. Refactoring it would not only make it easier to follow/understand, but it would make it more reusable.\")), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 546\n    },\n    __self: this\n  }, \"Let's fix these problems. Here's a refactored version:\"), React.createElement(LiveEditableCode, {\n    id: \"react-scroll-flattener-refactored\",\n    gistId: \"e568721ed56b040e05e101874ca2b799\",\n    scope: {\n      getInterpolatedValue: getInterpolatedValue,\n      PropTypes: PropTypes\n    },\n    size: \"extra-wide\",\n    code: reactScrollFlattenerRefactoredCode,\n    maxHeight: 650,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 549\n    },\n    __self: this\n  }), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557\n    },\n    __self: this\n  }, \"Ahh, much nicer! The effect is more pleasant as the flattening animation happens within a smaller scroll window, and the code is easier to parse. As a bonus, our \", React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 560\n    },\n    __self: this\n  }, \"BezierCurve\"), \" and\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 561\n    },\n    __self: this\n  }, \"ScrollArea\"), \" components are generic, so they could be useful in totally different contexts.\"), React.createElement(Spacer, {\n    size: 25,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564\n    },\n    __self: this\n  }), React.createElement(SectionSubHeading, {\n    anchorId: \"another-note-on-perforamnce\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565\n    },\n    __self: this\n  }, \"Another note on performance\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 568\n    },\n    __self: this\n  }, \"The two versions above were written without any concern for performance. As it turns out, the performance is not so bad; on my low-end Chromebook, it stutters a little bit from time to time but mostly runs at 60fps. On my sluggish iPhone 6, it runs well enough (the biggest issue on mobile is that the browser address bar changes on scroll. Because of that, it may be wise to disable scroll-based things like this altogether on mobile).\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 576\n    },\n    __self: this\n  }, \"That said, your mileage may vary. If you want to improve performance, there are a few ways this could be optimized:\"), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 580\n    },\n    __self: this\n  }, React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 581\n    },\n    __self: this\n  }, React.createElement(TextLink, {\n    href: \"https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582\n    },\n    __self: this\n  }, \"Throttle\"), ' ', \"the scroll-handler in \", React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 585\n    },\n    __self: this\n  }, \"ScrollArea\"), \" that it only fires every 20ms or so. This is to calm down certain touch-screen or trackpad interfaces that can fire far more often than is required.\"), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 589\n    },\n    __self: this\n  }, \"One of the more expensive parts of this effect is that we're interacting with the DOM, via\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592\n    },\n    __self: this\n  }, React.createElement(TextLink, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 593\n    },\n    __self: this\n  }, \"getBoundingClientRect\")), \", on every scroll event. Ideally, we could cache the position of our\", ' ', React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598\n    },\n    __self: this\n  }, \"ScrollArea\"), \" on mount, and then check the current scroll distance against this value.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 600\n    },\n    __self: this\n  }), React.createElement(Spacer, {\n    size: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601\n    },\n    __self: this\n  }), \"Unfortunately, this method opens up new problems. It assumes that nothing between the top of the document and your B\\xE9zier curve will change height, since our calculations assume a static distance between the two. Mobile browsers like iOS Safari will hide their chrome as you scroll down, so we'd have to factor that in as well.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 607\n    },\n    __self: this\n  }), React.createElement(Spacer, {\n    size: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 608\n    },\n    __self: this\n  }), \"It's far from impossible, but it wasn't worth the trouble for me, given that performance was satisfactory on the devices I'm targeting.\"), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 612\n    },\n    __self: this\n  }, \"By storing\", React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 614\n    },\n    __self: this\n  }, \"scrollRatio\"), \" in state and re-rendering whenever it changes, React needs some time to work out how the DOM has changed as a result of the scroll.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 617\n    },\n    __self: this\n  }), React.createElement(Spacer, {\n    size: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 618\n    },\n    __self: this\n  }), \"The refactor to extract several components, while very good for DX and reusability, also means that React has a slightly more complex tree to reconcile.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 622\n    },\n    __self: this\n  }), React.createElement(Spacer, {\n    size: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 623\n    },\n    __self: this\n  }), \"This all sounds a bit scary, but as we discovered earlier, React's reconciliation process is very quick on small trees like this. The cost of the refactor was negligible on my chromebook.\", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 627\n    },\n    __self: this\n  }), React.createElement(Spacer, {\n    size: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 628\n    },\n    __self: this\n  }), \"If you really need to extract every drop of performance, you could work with the DOM directly, by setting the new \", React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 630\n    },\n    __self: this\n  }, \"path\"), ' ', \"instructions using \", React.createElement(InlineCode, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633\n    },\n    __self: this\n  }, \"setAttribute\"), \". Note that you'd need to store everything in 1 component again.\")), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 637\n    },\n    __self: this\n  }), React.createElement(SectionHeading, {\n    anchorId: \"in-conclusion\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 638\n    },\n    __self: this\n  }, \"In Conclusion\"), React.createElement(TrackRead, {\n    slug: FRONT_MATTER.slug,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 639\n    },\n    __self: this\n  }), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 640\n    },\n    __self: this\n  }, \"Whew, you made it through this B\\xE9zier deep-dive!\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 641\n    },\n    __self: this\n  }, \"The technique described in this blog post is foundational, and there's tons of flourishes you can add on top of it:\"), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 645\n    },\n    __self: this\n  }, React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 646\n    },\n    __self: this\n  }, \"This blog uses 3 layered B\\xE9zier curves with different fill colours to provide depth to the experience.\"), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650\n    },\n    __self: this\n  }, \"You can experiment with different easings for the interpolation (B\\xE9zier curves are often used for\", ' ', React.createElement(TextLink, {\n    href: \"http://cubic-bezier.com/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 653\n    },\n    __self: this\n  }, \"timing functions\"), \", after all!). What if the curve got \", React.createElement(\"em\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 654\n    },\n    __self: this\n  }, \"even more dramatic\"), \" before smoothing it out?\"), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 657\n    },\n    __self: this\n  }, \"You could experiment with\", ' ', React.createElement(TextLink, {\n    href: \"https://github.com/chenglou/react-motion\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 659\n    },\n    __self: this\n  }, \"spring physics\"), \", to give the transition inertia.\")), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 664\n    },\n    __self: this\n  }, \"I'm excited to see what you build with this technique! Let me know\", ' ', React.createElement(TextLink, {\n    href: \"https://twitter.com/joshwcomeau\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666\n    },\n    __self: this\n  }, \"on Twitter\"), \".\"), React.createElement(Spacer, {\n    size: 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 668\n    },\n    __self: this\n  }), React.createElement(SectionSubHeading, {\n    anchorId: \"join-the-newsletter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 669\n    },\n    __self: this\n  }, \"Join the Newsletter\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 672\n    },\n    __self: this\n  }, \"This blog post is the first thing I've tried in this format. It was a heck of a lot of fun to build, but it was also a \", React.createElement(Em, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 674\n    },\n    __self: this\n  }, \"tremendous\"), \" amount of work compared to writing a Medium post.\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 677\n    },\n    __self: this\n  }, \"One of the ways you can help signal to me that this content is worth the extra work is by signing up for the newsletter! The newsletter will be sent once every few weeks, and subscribers will be the first to hear about new posts.\"), React.createElement(NewsletterSignup, {\n    id: \"conclusion\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 684\n    },\n    __self: this\n  }), React.createElement(Spacer, {\n    size: 80,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 685\n    },\n    __self: this\n  }), React.createElement(SectionSubHeading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 686\n    },\n    __self: this\n  }, \"Additional Reading\"), React.createElement(Paragraph, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 687\n    },\n    __self: this\n  }, \"Learn more about the math and mechanics behind B\\xE9zier curves with these two amazing resources:\"), React.createElement(List, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 691\n    },\n    __self: this\n  }, React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 692\n    },\n    __self: this\n  }, React.createElement(TextLink, {\n    href: \"http://jamie-wong.com/post/bezier-curves/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 693\n    },\n    __self: this\n  }, \"Bezier Curves from the Ground Up\"), \", by Jamie Wong\"), React.createElement(ListItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 697\n    },\n    __self: this\n  }, React.createElement(TextLink, {\n    href: \"https://pomax.github.io/bezierinfo/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 698\n    },\n    __self: this\n  }, \"A Primer on B\\xE9zier curves\"), \", by Mike \\\"Pomax\\\" Kamermans\")));\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(FRONT_MATTER, \"FRONT_MATTER\", \"/Users/joshuacomeau/work/blog/src/pages/posts/dynamic-bezier-curves/main-content.js\");\n  reactHotLoader.register(_default, \"default\", \"/Users/joshuacomeau/work/blog/src/pages/posts/dynamic-bezier-curves/main-content.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/joshuacomeau/work/blog/src/pages/posts/dynamic-bezier-curves/main-content.js"],"names":["React","Fragment","PropTypes","COLORS","getInterpolatedValue","Paragraph","Sidenote","List","ListItem","SectionHeading","SectionSubHeading","InlineCode","Divider","TextLink","Em","NewsletterSignup","Spacer","Latex","SingleAxisDemo","LiveEditableCode","InitialCurve","BezierController","BezierFlattener","BezierInterpolationGraph","TrackRead","basicShapesCode","pathIntroCode","bezierPathCode","chainedCurvesCode","reactBezierCode","interpolateFunctionCode","reactScrollFlattenerCode","reactScrollFlattenerRefactoredCode","FRONT_MATTER","title","slug","published","publishedOn","heroStyle","heroImage","heroBackground","heroTitleGradientSteps","pink","purple","abstract","value"],"mappings":"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","sourcesContent":["/*\n  This first post was not originally written in MDX.\n\n  Rather than spend a bunch of time converting it, I'm just \"wrapping\" it, by\n  importing the original component.\n\n  Not the cleanest solution, but by far the fastest :)\n*/\n/* eslint-disable jsx-a11y/accessible-emoji */\n\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { COLORS } from 'constants';\nimport { getInterpolatedValue } from 'utils';\n\nimport Paragraph from 'components/Paragraph';\nimport Sidenote from 'components/Sidenote';\nimport List from 'components/List';\nimport ListItem from 'components/ListItem';\nimport SectionHeading from 'components/SectionHeading';\nimport SectionSubHeading from 'components/SectionSubHeading';\nimport InlineCode from 'components/InlineCode';\nimport Divider from 'components/Divider';\nimport TextLink from 'components/TextLink';\nimport Em from 'components/Em';\nimport NewsletterSignup from 'components/NewsletterSignup';\nimport Spacer from 'components/Spacer';\nimport Latex from 'components/Latex';\nimport SingleAxisDemo from 'components/SingleAxisDemo';\nimport LiveEditableCode from 'components/LiveEditableCode';\nimport InitialCurve from 'components/InitialCurve';\nimport BezierController from 'components/BezierController';\nimport BezierFlattener from 'components/BezierFlattener';\nimport BezierInterpolationGraph from 'components/BezierInterpolationGraph';\nimport TrackRead from 'components/TrackRead';\n\nimport basicShapesCode from './code/basic-shapes.example';\nimport pathIntroCode from './code/path-intro.example';\nimport bezierPathCode from './code/bezier-path.example';\nimport chainedCurvesCode from './code/chained-curves.example';\nimport reactBezierCode from './code/react-bezier.example';\nimport interpolateFunctionCode from './code/interpolate-function.example';\nimport reactScrollFlattenerCode from './code/react-scroll-flattener.example';\nimport reactScrollFlattenerRefactoredCode from './code/react-scroll-flattener-refactored.example';\n\nexport const FRONT_MATTER = {\n  title: 'Dynamic Bézier Curves',\n  slug: 'dynamic-bezier-curves',\n  published: true,\n  publishedOn: '2018-05-23',\n  heroStyle: 'watermelon-gradient',\n  heroImage: null,\n  heroBackground: 'linear-gradient(120deg, #d4fc79 0%, #96e6a1 100%)',\n  heroTitleGradientSteps: ['80deg', COLORS.pink[500], COLORS.purple[700]],\n  abstract:\n    \"A deep dive into Bézier curves in React. We'll look at how to build dynamic effects such as scroll-to-flatten using SVG path instructions, and how to architect our components for maximum readability and reusability.\",\n};\n\nexport default () => (\n  <Fragment>\n    <Paragraph>\n      First off - woohoo! This is my first published post on the new blog. I'm\n      super excited. Thanks for checking it out! 🥂\n    </Paragraph>\n\n    <Paragraph>\n      While building this blog, I wanted it to feel whimsical, with plenty of\n      charming interactions and animations. I built this while working on my\n      React Europe talk,{' '}\n      <TextLink href=\"https://www.youtube.com/watch?v=Z2d9rw9RwyE\">\n        The Case for Whimsy\n      </TextLink>, and so it was very much on my mind.\n    </Paragraph>\n\n    <Paragraph>\n      For example, did you notice that as you started scrolling on this page,\n      the Bézier curves that border the green title hero thingy started\n      flattening? Keep your eye on the swoopy curves just above the post text as\n      you scroll through the top of the document. Notice how they become flat as\n      they approach the header at the top of the viewport?\n    </Paragraph>\n\n    <Paragraph>\n      In a delightful bit of serendipity, I realized while building the blog\n      that this feature would make a great first blog post!\n    </Paragraph>\n    <Paragraph>\n      The whole reason I started this blog was that I wanted a way to build\n      dynamic, interactive articles that are more effective at sharing and\n      teaching concepts. Unlike with plain text on Medium, this blog is a\n      fully-powered React app, and so I can create and embed interactive\n      elements that help the reader build an intuitive understanding of the\n      subject being presented. These dynamic \"flattenable\" Bézier curves are a\n      perfect subject for this format, as they have underlying complexity that\n      would be difficult to explain with words alone.\n    </Paragraph>\n\n    <Paragraph>\n      In this maiden blog post, we'll go through the basics of working with\n      Bézier curves and SVG in React.js. We'll learn how to build dynamic curves\n      that respond to user input:\n    </Paragraph>\n    <SingleAxisDemo id=\"flattenable-curve\" showNote={true} defaultValue={20}>\n      {value => (\n        <InitialCurve percentStraightened={value} color={COLORS.pink[500]} />\n      )}\n    </SingleAxisDemo>\n    <Divider />\n    <SectionHeading anchorId=\"understanding-svg-paths\">\n      A Quick SVG Refresher\n    </SectionHeading>\n    <Paragraph>\n      For achieving this effect, we'll use SVG. We could also use HTML Canvas,\n      but I generally prefer to work with SVG. It's more React-like in its API,\n      there's less complexity in setting it up, and it's more a11y-friendly.\n    </Paragraph>\n    <Paragraph>\n      While doing a deep dive into SVG is beyond the scope of this post (I'd\n      recommend the{' '}\n      <TextLink href=\"https://www.w3schools.com/graphics/svg_intro.asp\">\n        W3Schools tutorial\n      </TextLink>{' '}\n      for that), we'll cover the basics, and show how to create some shapes from\n      scratch. Experienced SVG-ers can jump to{' '}\n      <TextLink href=\"#intro-to-bezier-curves\">the next section</TextLink>.\n    </Paragraph>\n    <Paragraph>\n      The simplest form of SVG drawings use shape elements, like{' '}\n      <InlineCode>{'<rect>'}</InlineCode> or{' '}\n      <InlineCode>{'<ellipse>'}</InlineCode>.\n    </Paragraph>\n    <LiveEditableCode\n      id=\"basic-shapes\"\n      gistId=\"01114efda3cb02e4ffa3b49431c14982\"\n      code={basicShapesCode}\n      split={[50, 50]}\n      maxHeight={585}\n    />\n    <Sidenote>\n      <Em>Note:</Em> All the code snippets in this page are React elements, not\n      HTML.\n    </Sidenote>\n    <Paragraph>\n      These shapes are straightforward and declarative, but that simplicity\n      comes at the cost of flexibility; you can only create a handful of\n      different shapes.\n    </Paragraph>\n    <Paragraph>\n      To do neat curvy things, we need to use the{' '}\n      <InlineCode>{'<path>'}</InlineCode> element. This swiss-army-knife of an\n      SVG primitive lets you specify a sequence of steps to execute, in a\n      seemingly-inscrutable bundle of letters and numbers:\n    </Paragraph>\n    <LiveEditableCode\n      id=\"path-intro\"\n      gistId=\"27a7f8f1b1a8dcd93d4330b90a7dcc86\"\n      code={pathIntroCode}\n    />\n    <Paragraph>The interactive code snippet above uses 2 commands:</Paragraph>\n    <List>\n      <ListItem>\n        <InlineCode>M</InlineCode>, which instructs the path to <Em>move</Em> to\n        a specific coordinate.\n      </ListItem>\n      <ListItem>\n        <InlineCode>L</InlineCode>, which instructs the path to create a{' '}\n        <Em>line</Em> from the current position to the specified coordinate.\n      </ListItem>\n    </List>\n    <Paragraph>\n      After the commands <InlineCode>M</InlineCode> and{' '}\n      <InlineCode>L</InlineCode>, we see some numbers. These can be thought of\n      as \"arguments\" for the commands. In this case, the arguments are\n      coordinates; both commands require a single X/Y pair.\n    </Paragraph>\n    <Paragraph>\n      In other words, we can read the above path as: \"Move to{' '}\n      <InlineCode>{'{x: 100, y: 100}'}</InlineCode>, then draw a line to{' '}\n      <InlineCode>{'{x: 200, y: 100}'}</InlineCode>\", and so on.\n    </Paragraph>\n    <Paragraph>\n      The coordinate system is relative to the values specified in the{' '}\n      <InlineCode>viewBox</InlineCode>. The current viewbox specifies that the\n      viewable area has a top-left corner of 0/0, a width of 300, and a height\n      of 300. So all of the coordinates specified in the{' '}\n      <InlineCode>path</InlineCode> are within that 300x300 box.\n    </Paragraph>\n    <Paragraph>\n      The <InlineCode>viewBox</InlineCode> is what makes SVGs scalable; we can\n      make our SVG any size we like, and everything will scale naturally, since\n      the elements within our SVG are relative to this 300x300 box.\n    </Paragraph>\n    <Paragraph>\n      The <InlineCode>path</InlineCode> element features{' '}\n      <TextLink href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\">\n        quite a number\n      </TextLink>{' '}\n      of these commands. There are two that are relevant for our purposes:\n    </Paragraph>\n    <List>\n      <ListItem>\n        <InlineCode>Q</InlineCode>, which instructs the path to create a{' '}\n        <Em>quadratic</Em> Bézier curve.\n      </ListItem>\n      <ListItem>\n        <InlineCode>C</InlineCode>, which instructs the path to create a{' '}\n        <Em>cubic</Em> Bézier curve.\n      </ListItem>\n    </List>\n    <Spacer size={80} />\n    <SectionHeading anchorId=\"intro-to-bezier-curves\">\n      Intro to Bézier Curves\n    </SectionHeading>\n    <Paragraph>\n      Bézier curves are surprisingly common. Due to their versatility, they're a\n      staple in most graphics software like Photoshop, but they're also used as\n      timing functions: if you've ever used non-linear CSS transitions (like the\n      default \"ease\"), you've already worked with Bézier curves!\n    </Paragraph>\n    <Paragraph>But what are they, and how do they work?</Paragraph>\n    <Paragraph>\n      A Bézier curve is essentially a line from a <Em>start point</Em> to an{' '}\n      <Em>end point</Em> that is acted upon by one or more{' '}\n      <Em>control points</Em>. A control point curves the line towards it, as if\n      the control point was pulling it in its direction.\n    </Paragraph>\n    <Paragraph>\n      The following line looks like a straight line, but check out what happens\n      when you move the points around—try dragging the middle control point up\n      and down.\n    </Paragraph>\n    <BezierController id=\"initial\" initialType=\"quadratic\" />\n    <Paragraph>\n      The line above is a <Em>quadratic</Em> Bézier curve; this means that it\n      has a <strong>single control point</strong>. I'm guessing it gets its name\n      from the fact that you can create parabola-like shapes with it:\n    </Paragraph>\n    <BezierController\n      id=\"parabola\"\n      initialType=\"quadratic\"\n      p1={[400, 15]}\n      p2={[500, 395]}\n      p4={[600, 15]}\n    />\n    <Paragraph>\n      A <Em>cubic</Em> Bézier curve, in contrast, has <strong>two</strong>{' '}\n      control points. This allows for much more interesting curves:\n    </Paragraph>\n    <BezierController\n      id=\"toggleable\"\n      allowToggle\n      initialType=\"cubic\"\n      p1={[25, 25]}\n      p2={[333, 375]}\n      p3={[666, 25]}\n      p4={[975, 375]}\n    />\n    <Paragraph>\n      The syntax for Bézier curves in SVG <InlineCode>path</InlineCode>{' '}\n      definitions is a little counter-intuitive, but it looks like this:\n    </Paragraph>\n    <LiveEditableCode\n      id=\"bezier-path\"\n      gistId=\"1720d55b885e61dc070a59fabc500142\"\n      code={bezierPathCode}\n    />\n    <Paragraph>\n      The thing that makes this counter-intuitive, to me at least, is that the{' '}\n      <InlineCode>startPoint</InlineCode> is inferred in the{' '}\n      <InlineCode>Q</InlineCode> command; while there are 3 points needed for a\n      quadratic Bézier curve, only 2 points are passed as arguments to{' '}\n      <InlineCode>Q</InlineCode>.\n    </Paragraph>\n    <Paragraph>\n      Similarly, for a cubic Bézier curve, only the control points and the end\n      point are provided to the <InlineCode>C</InlineCode> command.\n    </Paragraph>\n    <Paragraph>\n      This syntax does mean that curves can conveniently be chained together, as\n      one curve starts where the last one ends:\n    </Paragraph>\n    <LiveEditableCode\n      id=\"chained-curves\"\n      gistId=\"5f7315ec4751cf2dadb5ba41f037dcdc\"\n      code={chainedCurvesCode}\n    />\n    <Paragraph>\n      Ok, I think that's enough playing with vanilla SVGs. Let's see how we can\n      leverage React to make these curves dynamic!\n    </Paragraph>\n\n    <SectionHeading anchorId=\"bezier-curves-in-react\">\n      Bézier Curves in React\n    </SectionHeading>\n    <Paragraph>\n      Up to this point, we've been looking at static SVGs. How do we make them\n      change, over time or based on user input?\n    </Paragraph>\n    <Paragraph>\n      Well, in keeping with the \"meta\" theme of this blog post, why not examine\n      the draggable-with-lines Bézier curves from earlier in this post?\n    </Paragraph>\n    <Paragraph>\n      There's a fair bit of code to manage this, even in this\n      slightly-simplified snippet. I've annotated it heavily, which hopefully\n      makes things easier to parse. 🤞\n    </Paragraph>\n    <LiveEditableCode\n      id=\"react-bezier\"\n      gistId=\"f164468fc145cc8abb28f6b12652f93b\"\n      size=\"extra-wide\"\n      code={reactBezierCode}\n      maxHeight={650}\n    />\n\n    <Sidenote>\n      <Em>Note:</Em> The full version, with support for touch events, can be\n      found{' '}\n      <TextLink href=\"https://github.com/joshwcomeau/blog/blob/master/src/components/Bezier.js\">\n        on GitHub\n      </TextLink>.\n    </Sidenote>\n\n    <Paragraph>To summarize how this works:</Paragraph>\n    <List>\n      <ListItem>\n        React holds variables in component state for{' '}\n        <InlineCode>startPoint</InlineCode>,{' '}\n        <InlineCode>controlPoint</InlineCode>, and{' '}\n        <InlineCode>endPoint</InlineCode>.\n      </ListItem>\n      <ListItem>\n        In the <Em>render</Em> method, we build the instructions for the{' '}\n        <InlineCode>path</InlineCode> using these state variables.\n      </ListItem>\n      <ListItem>\n        When the user clicks or taps on one of the points, we update the state\n        to keep track of which point is moving with{' '}\n        <InlineCode>draggingPointId</InlineCode>.\n      </ListItem>\n      <ListItem>\n        As the user moves the mouse (or finger) across the SVG's surface, we do\n        some calculations to figure out where the currently-dragging point needs\n        to move to. This is made complex by the fact that SVGs have their own\n        internal coordinate system (viewBox), and so we have to translate the\n        on-screen pixels to this system.\n      </ListItem>\n\n      <ListItem>\n        Once we have the new X/Y coordinate for the active point,{' '}\n        <InlineCode>setState</InlineCode> lets React know about this state\n        change, and the component re-renders, which causes the{' '}\n        <InlineCode>path</InlineCode> to be re-calculated.\n      </ListItem>\n    </List>\n    <Spacer size={25} />\n    <SectionSubHeading anchorId=\"a-note-on-performance\">\n      A note on performance\n    </SectionSubHeading>\n    <Paragraph>\n      By using React's update cycle to manage the point coordinates, there is\n      added overhead of letting React run its reconciliation cycle on every{' '}\n      <InlineCode>mousemove</InlineCode>. Is this prohibitively expensive?\n    </Paragraph>\n    <Paragraph>\n      The answer is that it depends. React's reconciliation can be surprisingly\n      fast, especially when dealing with such a small tree (after all, the only\n      thing that needs to be diffed is an SVG). Especially in \"production\" mode,\n      when React doesn't have to do a lot of dev warning checks, this process\n      can take fractions of a millisecond.\n    </Paragraph>\n    <Paragraph>\n      I wrote an{' '}\n      <TextLink href=\"https://github.com/joshwcomeau/blog/blob/master/src/pages/posts/dynamic-bezier-curves/code/optimized-react-bezier.example\">\n        alternative implementation\n      </TextLink>{' '}\n      that updates the DOM directly. It does run faster (about 50% faster in my\n      quick test), but both implementations still clock in under 1ms on modern\n      high-end hardware. On the cheapest Chromebook I could find, the\n      \"unoptimized\" one still averaged 50fps or so.\n    </Paragraph>\n    <Spacer size={80} />\n    <SectionHeading anchorId=\"curve-interpolation\">\n      Curve Interpolation\n    </SectionHeading>\n    <Paragraph>\n      I seem to have gotten a little side-tracked! Our original goal was to\n      create a Bézier curve that flattens itself on scroll.\n    </Paragraph>\n    <Paragraph>\n      Given what we've gone over so far, we have almost all of the tools we need\n      to solve this problem! A Bézier curve with its control point(s) directly\n      between the start and end points is actually a straight line! So we need\n      to transition the control points from their curvy values to a flat value.\n    </Paragraph>\n    <BezierFlattener />\n    <Spacer size={32} />\n    <Paragraph>\n      We need a way to <Em>interpolate values</Em>. We know where the control\n      points should be at 0% and 100%, but what about when the user is 25%\n      scrolled through the content?\n    </Paragraph>\n    <Paragraph>\n      While we could be fancy and ease the transition, a linear transformation\n      works just fine for our purposes. So when the user is 50% scrolled through\n      the content, the control points will be 50% of the way between their\n      initial curvy value, and the flat-line value.\n    </Paragraph>\n    <Paragraph>\n      For this, some secondary-school maths will come in handy. If you're\n      already up to speed on interpolation, you can{' '}\n      <TextLink href=\"#handling-scroll-in-react\">skip this bit</TextLink>.\n    </Paragraph>\n    <Paragraph>\n      If you plumb the depths of your memory, you may remember how to calculate\n      the <Em>slope</Em> of a line. The slope tells you how the line changes\n      over time. We calculate it by dividing the{' '}\n      <strong>\n        change in <Latex>y</Latex>\n      </strong>{' '}\n      over the{' '}\n      <strong>\n        change in <Latex>x</Latex>\n      </strong>:\n    </Paragraph>\n    <Latex block>{'slope = \\\\frac{y2 - y1}{x2 - x1} = \\\\frac{Δy}{Δx}'}</Latex>\n    <Paragraph>\n      There's also this rascal, the linear equation formula. This allows us to\n      graph a straight line, and figure out the <Latex>y</Latex> value for a\n      given <Latex>x</Latex> value. By convention, slope is given the variable{' '}\n      <Latex>a</Latex>:\n    </Paragraph>\n    <Latex block>y = ax + b</Latex>\n    <Paragraph>\n      How does this relate to interpolation? Well, let's imagine that our Bézier\n      curve's control point, when it's all curvy, is <Latex>200</Latex> pixels\n      away from its flattened position, so we'll give it an initial{' '}\n      <Latex>y</Latex> value of <Latex>200</Latex>. The <Latex>x</Latex> in this\n      case is really a measure of progress, so we'll have it range from{' '}\n      <Latex>0</Latex> (completely curvy) to <Latex>1</Latex> (completely flat).\n      If we graph this line, we get this:\n    </Paragraph>\n    <BezierInterpolationGraph />\n\n    <Paragraph>\n      To clarify, this line represents the range of possible <Latex>y</Latex>{' '}\n      values for a quadratic Bézier curve's control point. Our <Latex>x</Latex>{' '}\n      values represent the degree of \"flattening\"; this is useful to us because\n      we want to be able to provide an <Latex>x</Latex> value like{' '}\n      <Latex>0.46</Latex>, and figure out what the corresponding{' '}\n      <Latex>y</Latex> value is (our <Latex>x</Latex> value will come from user\n      input, like the percentage scrolled through the viewport).\n    </Paragraph>\n\n    <Paragraph>\n      To make our formula work, we need to know at least 2 points on this line.\n      Thankfully, we do! We know that the initial position, fully curved, is at{' '}\n      <InlineCode>{`{ x: 0, y: 200 }`}</InlineCode>, and we know that the curve\n      becomes fully flattened at <InlineCode>{`{ x: 1, y: 0 }`}</InlineCode>.\n    </Paragraph>\n    <List>\n      <ListItem>\n        The slope would be equal to{' '}\n        <Latex>\n          {'\\\\frac{Δy}{Δx} = \\\\frac{0 - 200}{1 - 0} = \\\\frac{-200}{1} = -200'}\n        </Latex>.\n      </ListItem>\n      <ListItem>\n        Our <Latex>b</Latex> value is the y-axis intercept, which is our initial\n        curved value, <Latex>200</Latex>.\n      </ListItem>\n      <ListItem>\n        <Latex>x</Latex> will be the ratio of scroll-through, between 0 and 1,\n        that we'll get from our scroll handler.\n      </ListItem>\n    </List>\n    <Paragraph>Filling it in:</Paragraph>\n    <Latex block>{'y = -200x + 200'}</Latex>\n    <Paragraph>\n      If it's 25% of the way through, <Latex>x</Latex> will be 0.25, and so our{' '}\n      <Latex>y</Latex> value would be{' '}\n      <Latex>y = (-200)(0.25) + 200 = 150</Latex>, which is correct: 150 is 1/4\n      of the way between 200 and 0.\n    </Paragraph>\n    <Paragraph>\n      Here's our function that performs the above calculations:\n    </Paragraph>\n    <LiveEditableCode\n      id=\"interpolate-function\"\n      gistId=\"63a1555b693153f08908a727c98a7310\"\n      maxHeight={600}\n      split={[0.8, 0.2]}\n      code={interpolateFunctionCode}\n    />\n    <Paragraph>\n      Looks like teenage-me was wrong; algebra <strong>is</strong> useful and\n      practical!\n    </Paragraph>\n    <Spacer size={80} />\n    <SectionHeading anchorId=\"handling-scroll-in-react\">\n      Handling Scroll in React\n    </SectionHeading>\n    <Paragraph>\n      We're in the home stretch now! Time to combine all these ideas into\n      something usable.\n    </Paragraph>\n    <Paragraph>\n      Let's start by building a component that contains our scroll-handler to\n      interpolate from the bottom of the viewport to the top, and connect those\n      values to a Bézier curve in the <Em>render</Em> function:\n    </Paragraph>\n    <LiveEditableCode\n      id=\"react-scroll-flattener\"\n      gistId=\"9e3fa23fb1f291ee781ed110b6cb7843\"\n      scope={{ getInterpolatedValue, PropTypes }}\n      size=\"extra-wide\"\n      code={reactScrollFlattenerCode}\n      maxHeight={650}\n    />\n    <Paragraph>\n      This initial approach seems to work OK! There are two things I want to\n      improve though:\n    </Paragraph>\n    <List>\n      <ListItem>\n        The \"timing\" of the flattening feels wrong to me.\n        <br />\n        <Spacer size={10} />\n        When the curve fully enters the viewport, it's already starting to be\n        flattened. We don't get to see it in 100%-curved form. Worse, it hasn't\n        finished flattening by the time it scrolls out of view! This is because\n        this page has a header that takes up the top 50px of the viewport, and\n        we aren't taking that into account.\n        <br />\n        <Spacer size={10} />\n        To solve these problems, we need to define a <Em>scrollable area</Em>,\n        instead of using the viewport.\n      </ListItem>\n      <ListItem>\n        This component is doing an awful lot. It feels like we could extract a\n        couple components from this. Refactoring it would not only make it\n        easier to follow/understand, but it would make it more reusable.\n      </ListItem>\n    </List>\n    <Paragraph>\n      Let's fix these problems. Here's a refactored version:\n    </Paragraph>\n    <LiveEditableCode\n      id=\"react-scroll-flattener-refactored\"\n      gistId=\"e568721ed56b040e05e101874ca2b799\"\n      scope={{ getInterpolatedValue, PropTypes }}\n      size=\"extra-wide\"\n      code={reactScrollFlattenerRefactoredCode}\n      maxHeight={650}\n    />\n    <Paragraph>\n      Ahh, much nicer! The effect is more pleasant as the flattening animation\n      happens within a smaller scroll window, and the code is easier to parse.\n      As a bonus, our <InlineCode>BezierCurve</InlineCode> and{' '}\n      <InlineCode>ScrollArea</InlineCode> components are generic, so they could\n      be useful in totally different contexts.\n    </Paragraph>\n    <Spacer size={25} />\n    <SectionSubHeading anchorId=\"another-note-on-perforamnce\">\n      Another note on performance\n    </SectionSubHeading>\n    <Paragraph>\n      The two versions above were written without any concern for performance.\n      As it turns out, the performance is not so bad; on my low-end Chromebook,\n      it stutters a little bit from time to time but mostly runs at 60fps. On my\n      sluggish iPhone 6, it runs well enough (the biggest issue on mobile is\n      that the browser address bar changes on scroll. Because of that, it may be\n      wise to disable scroll-based things like this altogether on mobile).\n    </Paragraph>\n    <Paragraph>\n      That said, your mileage may vary. If you want to improve performance,\n      there are a few ways this could be optimized:\n    </Paragraph>\n    <List>\n      <ListItem>\n        <TextLink href=\"https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf\">\n          Throttle\n        </TextLink>{' '}\n        the scroll-handler in <InlineCode>ScrollArea</InlineCode> that it only\n        fires every 20ms or so. This is to calm down certain touch-screen or\n        trackpad interfaces that can fire far more often than is required.\n      </ListItem>\n      <ListItem>\n        One of the more expensive parts of this effect is that we're interacting\n        with the DOM, via{' '}\n        <InlineCode>\n          <TextLink href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\">\n            getBoundingClientRect\n          </TextLink>\n        </InlineCode>\n        , on every scroll event. Ideally, we could cache the position of our{' '}\n        <InlineCode>ScrollArea</InlineCode> on mount, and then check the current\n        scroll distance against this value.\n        <br />\n        <Spacer size={10} />\n        Unfortunately, this method opens up new problems. It assumes that\n        nothing between the top of the document and your Bézier curve will\n        change height, since our calculations assume a static distance between\n        the two. Mobile browsers like iOS Safari will hide their chrome as you\n        scroll down, so we'd have to factor that in as well.\n        <br />\n        <Spacer size={10} />\n        It's far from impossible, but it wasn't worth the trouble for me, given\n        that performance was satisfactory on the devices I'm targeting.\n      </ListItem>\n      <ListItem>\n        By storing\n        <InlineCode>scrollRatio</InlineCode> in state and re-rendering whenever\n        it changes, React needs some time to work out how the DOM has changed as\n        a result of the scroll.\n        <br />\n        <Spacer size={10} />\n        The refactor to extract several components, while very good for DX and\n        reusability, also means that React has a slightly more complex tree to\n        reconcile.\n        <br />\n        <Spacer size={10} />\n        This all sounds a bit scary, but as we discovered earlier, React's\n        reconciliation process is very quick on small trees like this. The cost\n        of the refactor was negligible on my chromebook.\n        <br />\n        <Spacer size={10} />\n        If you really need to extract every drop of performance, you could work\n        with the DOM directly, by setting the new <InlineCode>\n          path\n        </InlineCode>{' '}\n        instructions using <InlineCode>setAttribute</InlineCode>. Note that\n        you'd need to store everything in 1 component again.\n      </ListItem>\n    </List>\n    <Divider />\n    <SectionHeading anchorId=\"in-conclusion\">In Conclusion</SectionHeading>\n    <TrackRead slug={FRONT_MATTER.slug} />\n    <Paragraph>Whew, you made it through this Bézier deep-dive!</Paragraph>\n    <Paragraph>\n      The technique described in this blog post is foundational, and there's\n      tons of flourishes you can add on top of it:\n    </Paragraph>\n    <List>\n      <ListItem>\n        This blog uses 3 layered Bézier curves with different fill colours to\n        provide depth to the experience.\n      </ListItem>\n      <ListItem>\n        You can experiment with different easings for the interpolation (Bézier\n        curves are often used for{' '}\n        <TextLink href=\"http://cubic-bezier.com/\">timing functions</TextLink>,\n        after all!). What if the curve got <em>even more dramatic</em> before\n        smoothing it out?\n      </ListItem>\n      <ListItem>\n        You could experiment with{' '}\n        <TextLink href=\"https://github.com/chenglou/react-motion\">\n          spring physics\n        </TextLink>, to give the transition inertia.\n      </ListItem>\n    </List>\n    <Paragraph>\n      I'm excited to see what you build with this technique! Let me know{' '}\n      <TextLink href=\"https://twitter.com/joshwcomeau\">on Twitter</TextLink>.\n    </Paragraph>\n    <Spacer size={20} />\n    <SectionSubHeading anchorId=\"join-the-newsletter\">\n      Join the Newsletter\n    </SectionSubHeading>\n    <Paragraph>\n      This blog post is the first thing I've tried in this format. It was a heck\n      of a lot of fun to build, but it was also a <Em>tremendous</Em> amount of\n      work compared to writing a Medium post.\n    </Paragraph>\n    <Paragraph>\n      One of the ways you can help signal to me that this content is worth the\n      extra work is by signing up for the newsletter! The newsletter will be\n      sent once every few weeks, and subscribers will be the first to hear about\n      new posts.\n    </Paragraph>\n\n    <NewsletterSignup id=\"conclusion\" />\n    <Spacer size={80} />\n    <SectionSubHeading>Additional Reading</SectionSubHeading>\n    <Paragraph>\n      Learn more about the math and mechanics behind Bézier curves with these\n      two amazing resources:\n    </Paragraph>\n    <List>\n      <ListItem>\n        <TextLink href=\"http://jamie-wong.com/post/bezier-curves/\">\n          Bezier Curves from the Ground Up\n        </TextLink>, by Jamie Wong\n      </ListItem>\n      <ListItem>\n        <TextLink href=\"https://pomax.github.io/bezierinfo/\">\n          A Primer on Bézier curves\n        </TextLink>, by Mike \"Pomax\" Kamermans\n      </ListItem>\n    </List>\n  </Fragment>\n);\n"]}]}